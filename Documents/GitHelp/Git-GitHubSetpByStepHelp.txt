Note: anything in [ ] is something that you must determine, the actual [ ] symbols are not included
———————————Set up——————————————
1. Istall git
2. 
	a. If you are creating a new repo, do the command git init
	b. If you are cloning a repo from GitHub do 
		git clone [fork url]
		git remote add upstream [master repo url]

Let’s say you want to start working on a new issue or feature or whatever. 
1. Check your branch do 
		git branch 
	and a * will be next to the branch you are currently in.
	a. If you are not in master, save your changes, then do git checkout master

2. Next check to make sure your master branch is up to date. 
	a. First get any changes to the main master
		git fetch upstream master
	b. Merge those changes into your local master branch
		git merge upstream/master
	c. Push any changes to master to your fork
		git status
	     if any red files
		git add -A
		git commit -am “[your comment]”
		git push origin master 
	     (note: only time you should ever push to master!)
	
3. Branch into the branch you want to work in. (Note: if you want to branch into an existing branch just don’t add the -b)
	git checkout -b [your branch name]

4. Now you are ready to make changes! Make any changes you want. You will want to periodically “save” your changes by committing them to git. It is good to commit changes when you get to a place where you’ve finished a step of the task so that 1) it is tracked 2) if you get into a bad state you won’t have to start over, you can start from a working commit.

5. So you’re ready to commit (see what I did there).
	a. Make sure all your files are being tracked
		git status
	    if any are red, you need to mark them to be tracked
		git add -A
               if there are any files you want on your local device, but that don’t need to go into GitHub for everyone else, you can add the file by name to the .gitignore file in the top directory.
          b. After tracking the files
		git commit -am “[your message]”
	   you should try to use present tense in messages. Ex. “Adding new file” instead of “Added new file”

————————— Now we are going to interact through git with GitHub——————————
6. So, you’ve made a commit or two. (I like to push after every commit to be safe, but you don’t have to.) You want to “push” everything you’ve done up to GitHub so that others can see it and use it and you can use it on different devices etc. The following command will push it to your fork.
	git push origin [branch name]
      (Tip: you can use git branch to see what the name of your branch is)

7. Repeat 4 - 6 until you are done making changes to your branch.

—————————— GitHub Pull Requests ——————————————
8. Before you make a pull request, make sure your current branch is up to date with the main master branch do step 2 then
		git checkout [branch name]
		git merge origin/master
	if you see any thing about merge conflicts open the file in the IDE and fix them. 
	(Tip: It’s a good idea if you are working in the same area of the code as someone else to tell them not to do any Pos until yours is in. This will minimize merge conflicts.)

9. Go online to your fork on GitHub.

10. Since you are done with your branch, you want to merge it into the main repository’s master branch so that the feature or fix is added for everyone.
	a. Go to code -> branches and select the button that says “pull request” or “new pull request” next to the branch you want to merge in.

11. Review your changes looking at the Diff to make sure it is what you want.

12. Submit your request.

13. Have someone else that knows that area of the code review your changes and if they see a problem go, cancel the request and go back to step 4.
	Otherwise they can confirm your request and it is now merged.

14. Once it has been accepted on GitHub, tell the team that there is new stuff to get from the main repo, then do step 2 on your machine to make sure that your local repo and fork are up to date.

YAY! You did it! You just added a feature! (Or fixed a bug haha)